raw.githubusercontent.com_ObjectProcessMethodology_OPCAT4_master_trunk_src_gui_util_VerticalGridLayout
public void layoutContainer(Container parent) {
	synchronized (parent.getTreeLock()) {
	    Insets insets = parent.getInsets();
	    int ncomponents = parent.getComponentCount();
	    int nrows = rows;
	    int ncols = cols;
	    boolean ltr = parent.getComponentOrientation().isLeftToRight();

	    if (ncomponents == 0) {
		return;
	    }

	    if (ncols > 0) {
		nrows = (ncomponents + ncols - 1) / ncols;
		if (nrows == 1)
		    ncols = ncomponents;
	    } else {
		ncols = (ncomponents + nrows - 1) / nrows;
		if (ncols == 1)
		    nrows = ncomponents;
	    }

	    // int w = parent.width - (insets.left + insets.right);
	    // int h = parent.height - (insets.top + insets.bottom);
	    int w = parent.getSize().width - (insets.left + insets.right);
	    int h = parent.getSize().height - (insets.top + insets.bottom);
	    w = (w - (ncols - 1) * hgap) / ncols;
	    h = (h - (nrows - 1) * vgap) / nrows;

	    if (ltr) {
		for (int c = 0, x = insets.left; c < ncols; c++, x += w + hgap) {
		    for (int r = 0, y = insets.top; r < nrows; r++, y += h
			    + vgap) {
			// int i = r * ncols + c;
			int i = c * nrows + r;
			if (i < ncomponents) {
			    parent.getComponent(i).setBounds(x, y, w, h);
			}
		    }
		}
	    } else {
		// for (int c = 0, x = parent.width - insets.right - w; c <
                // ncols ; c++, x -= w + hgap) {
		for (int c = 0, x = parent.getSize().width - insets.right - w; c < ncols; c++, x -= w
			+ hgap) {
		    for (int r = 0, y = insets.top; r < nrows; r++, y += h
			    + vgap) {
			// int i = r * ncols + c;
			int i = c * nrows + r;
			if (i < ncomponents) {
			    parent.getComponent(i).setBounds(x, y, w, h);
			}
		    }
		}
	    }
	}

    }

    /**
         * Returns the string representation of this grid layout's values.
         * 
         * @return a string representation of this grid layout
         */
    public String toString() {
	return getClass().getName() + "[hgap=" + hgap + ",vgap=" + vgap
		+ ",rows=" + rows + ",cols=" + cols + "]";
    }
}